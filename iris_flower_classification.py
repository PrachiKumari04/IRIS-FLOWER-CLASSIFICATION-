# -*- coding: utf-8 -*-
"""IRIS FLOWER CLASSIFICATION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ddBHXSvarU_oOVW7BXW2TRRgsaoHvbfr
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import numpy as np

# Load the Iris dataset
iris = load_iris()
data = pd.DataFrame(iris.data, columns=iris.feature_names)
data['species'] = iris.target_names[iris.target]

# Split data into features (X) and target variable (y)
X = data.drop('species', axis=1)
y = data['species']

# Split data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Choose and train a model (Logistic Regression in this example)
model_lr = LogisticRegression()
model_lr.fit(X_train, y_train)

# Make predictions on the testing set
y_pred_lr = model_lr.predict(X_test)

# Evaluate model performance
accuracy_lr = accuracy_score(y_test, y_pred_lr)

print("Logistic Regression Accuracy:", accuracy_lr)
print(classification_report(y_test, y_pred_lr))



# Visualize feature distribution (example: petal length)
plt.hist(X['petal length (cm)'], bins=10, edgecolor='black')
plt.xlabel('Petal Length (cm)')
plt.ylabel('Frequency')
plt.title('Distribution of Petal Length in Iris Dataset')
plt.show()

# Confusion Matrix for better result interpretation
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(iris.target_names)) # Use np.arange after importing numpy
plt.xticks(tick_marks, iris.target_names, rotation=45)
plt.yticks(tick_marks, iris.target_names)

# Print entries of confusion matrix for detailed analysis
for i, row in enumerate(cm):
    for j, value in enumerate(row):
        plt.text(j, i, value, va='center', ha='center')

plt.ylabel('True Label')
plt.xlabel('Predicted Label')
plt.tight_layout()
plt.show()